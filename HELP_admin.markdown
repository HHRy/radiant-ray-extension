Hello, my name is Ray.
----------------------

Ray is a collection of `rake` tasks meant to simplify extension management.

Installing Ray
--------------

Ray can be installed as a regular Radiant extension directly into your project and used with `rake`, or installed globally and used with `sake`. Using Ray with `sake` is particularly handy on a development machine where you manage extensions in a number of different Radiant projects and don't want to bother installing Ray over and over again.

    Regular Radiant extension (Git)
    ===============================
    -- pick one --
    ./script/extension install ray
    git clone git://github.com/johnmuhl/radiant-ray-extension.git vendor/extensions/ray
    git submodule add git://github.com/johnmuhl/radiant-ray-extension.git vendor/extensions/ray

    Regular Radiant extension (HTTP)
    ================================
    cd vendor/extensions
    wget -O ray.tar.gz http://github.com/johnmuhl/radiant-ray-extension/tarball/master
    tar xzvf ray.tar.gz
    mv johnmuhl-radiant-ray-extension-* ray

    Global Sake tasks
    =================
    sake -i http://is.gd/8PIg

The "is.gd" link points to [this Gist][gist].

[gist]: http://gist.github.com/raw/28574/47b7e610b50ccf595479bda66fe284bd9535f650

Upgrading from Ray 1.x
----------------------

If you used Git to install Ray (or `script/extension install ray`) the easiest way to get up to date is:

    cd vendor/extensions/ray
    git pull origin master

If you installed Ray by downloading an archive file and manually unpacking it, deleting your existing version and repeating those steps is the easiest way to get up to date.

Auto-restarting your server
---------------------------

When managing your extensions Ray attempts to restart your server whenever it's necessary, if you haven't told Ray what kind of server to restart you'll get a reminder to manually restart your server whenever it's needed. Currently Ray only supports auto-restart for Passenger and Mongrel clusters, to set your preference run the appropriate command:

    rake ray:setup:restart server=mongrel
    rake ray:setup:restart server=passenger

Changing your download preference from HTTP to Git
--------------------------------------------------

The first time you run Ray your download preference will be guessed based on whether or not `git` can be found in your `$PATH`. If you installed Ray and didn't have `git` available at that time, but now you do and want to let Ray know about it run:

    rake ray:setup:download

Installing extensions
---------------------

**If you've used Ray 1.x you may want to re-read this section.**

Ray uses `git` or the Ruby HTTP library to install extensions from GitHub. You'll need `git` installed and in your `PATH` for Ray to use it. Additionally, if Ray notices that you're managing your Radiant project with `git` then extensions will be pulled in as *submodules* instead of *clones*.

In the past Ray (often) required an unseemly number of command line options in order to install extensions, fortunately these options are no longer necessary. Let's look at some examples.

    rake ray:ext name=blogtags
    ...(install happened here)...
    ==============================================================================
    The installation of the blog_tags extension was successful.
    However, I couldn't find tasks for the blog_tags extension.
    This could mean the extension doesn't have any tasks,
    or that I'm just not smart enough to track them down.
    Please manually verify the installation and restart the server.
    ==============================================================================

See how Ray just decided that the extension should be installed as `blog_tags` despite the extension being name "**blogtags**". Ray even lets you know when no tasks belonging to the extension were found. Here are some examples to give you an idea of the simple pattern used (output has been removed for clarity).

    rake ray:ext name=link_roll
    rake ray:ext name=help
    rake ray:ext name=tags
    rake ray:ext name=summarize

You get the idea. Now say you wanted to install *that* Textile extension...

    rake ray:ext name=textile
    ==============================================================================
    I couldn't find an extension named 'textile'.
    The following is a list of extensions that might be related.
    Use the command listed to install the appropriate extension.
    ==============================================================================
      extension: textile_editor
         author: jgarber
    description: Adds a toolbar to make editing pages and snippets written in Textile easier.
        command: rake ray:ext name=textile_editor
    ==============================================================================
      extension: textile-auto-fragment-ids
         author: tricycle
    description: Add random, autogenerated ids to common block level textile elements.
        command: rake ray:ext name=textile-auto-fragment-ids
    ==============================================================================
      extension: textile-toolbar
         author: pelargir
    description: Adds toolbars to Textile-enabled text areas in the admin.
        command: rake ray:ext name=textile-toolbar
    ==============================================================================

Find which extension is "*that* Textile extension" you wanted, copy, paste and immediately forget the name again.

Searching extensions
--------------------

Currently there over 100 Radiant extensions on GitHub (origins not forks!) and you don't even need to leave the command line to browse them all.

    rake ray:search term=blog
    ==============================================================================
      extension: metaweblog
         author: skrat
    description: Radiant extension to allow publishing/adding pages via MetaWeblog...
        command: rake ray:ext name=metaweblog
    ==============================================================================
    ...(more extensions here)...

But how to spend countless hours exploring the ever expanding extension pool?

    rake ray:extension:all
    ==============================================================================
    ...(big list here)...
    ==============================================================================

Add GitHub repository as git remote
-----------------------------------

If you use `git` as your installation method and want to merge changes from another GitHub repository, you can add the repository as a `git remote` to the submodule by supplying the `remote` variable. This enables you to use

    git pull 'remotehub' master

from within the submodule directory to merge changes from the remote repository. `remotehub` is the name of the GitHub user where the repository is located at. The format of the `remote` variable must match `remotehub/repository`.

This option is most useful for extension development and thus uses your clone url, i.e. `git@github.com:username/repository.git` instead of `git://github.com/username/repository.git`, so that you can push changes back to the repository.

Once you've setup your remotes you can use

    rake ray:pull name=extension_name

    # or pull in remotes for all extensions
    rake ray:pull

Bulk install extensions from a YAML file
----------------------------------------

You can create a simple YAML file called `extensions.yml` in your Radiant project's `config` directory and then use

    rake ray:bundle

to install all of the listed extensions at once. Here is what the `extensions.yml` file would look like to install the Aggregation, Help, Link Roll, Markdown and Page Attachments extensions.

    ---
    - name: aggregation
    - name: link-roll
    - name: help
    - name: markdown
    - name: page_attachments
      lib: mini_magick
    - name: blog
      hub: netzpirat
      remote: saturnflyer/radiant-blog-extension

Special extensions
------------------

In the past Ray had a few *special* extensions due to inadequacies in Ray. Ray is now less inadequate in this respect so these commands can be replaced with regular Ray commands now.

    rake ray:ext name=paperclipped
    rake ray:ext name=page_attachments
    rake ray:ext name=markdown
    rake ray:ext name=help

Disabling extensions
--------------------

With Ray you can disable any installed extension by running

    rake ray:dis name=extension_name

Disabled extensions will be moved to `vendor/ray/disabled_extensions`.

Enabling extensions
-------------------

Enabling extensions is just as easy as disabling

    rake ray:en name=extension_name

Uninstalling extensions
-----------------------

Uninstalling an extension is a little different than disabling in that it will try to revert any migrations the extension added and to some extent track down and remove static files (file removal is very conservative which makes it likely to miss some files). All files associated with an uninstalled extension are then completely deleted.

    rake ray:rm name=extension-name

"Legacy" Information
--------------------

Users of previous versions may notice that the commands have changed. While this appears to be the case it's not actually. All the same old commands are available, so if you got comfortable with `rake ray:extension:install name=mailer` and don't want to switch to `rake ray:ext name=mailer` you can keep right on using the long versions.

Declaring dependencies in your extensions
-----------------------------------------

This section only pertains to extension authors, and then only to those authors whose extensions rely on other bits of code, like RubyGems, Rails plugins or even other extensions.

* **RubyGem**: declare it in `dependency.yml`
* **Plugin**: declare it as submodule to your extension
* **Extension**: declare it in `dependency.yml`

The `dependency.yml` file has an extremely basic format.

    - gem: gem_name
    - extension: extension_name

You can list multiple gems or extensions (or mix'em up) in a single `dependency.yml` file. Gems are expected to declare their own dependencies and be dealt with in the RubyGems system. Extensions are passed into Ray and subject to same dependency check that your extension is so if your extension dependencies has dependencies they'll be installed as well.
